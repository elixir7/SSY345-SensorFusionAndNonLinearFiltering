% Autogenerated file: Mon Mar 30 11:10:14 2020
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('C:\Users\Isak\Documents\GitHub\SSY345-SensorFusionAndNonLinearFiltering\HA1\slprj\ert\crazyflie\tmwinternal\tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;





wr = coder.internal.writeDataInterfacesToCodeDescriptor("crazyflie","C:\Users\Isak\Documents\GitHub\SSY345-SensorFusionAndNonLinearFiltering\HA1\slprj\ert\crazyflie") ;

fr = coder.internal.writeFunctionInterfacesToCodeDescriptor("crazyflie", "C:\Users\Isak\Documents\GitHub\SSY345-SensorFusionAndNonLinearFiltering\HA1\slprj\ert\crazyflie") ;



skippedParameters = [];

  tmpParams = [];
    prmIdxMap = containers.Map;
    prmStartIdx = length(codeInfo.Parameters) + 1;





    
    
    


    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




          tmpArgs         = [];           
  tmpActualArgs   = [];           
  tmpRet          = coder.types.Argument.empty;           
  tmpActualReturn = RTW.DataInterface.empty;           
  
  
  
 
    
      
% Char type    
Type_char_R1_V0 = coder.types.Char;
    Type_char_R1_V0.Identifier = 'char_T';
    Type_char_R1_V0.ReadOnly = 1;
    Type_char_R1_V0.Volatile = 0;
    

% Pointer Type: Pointer to Type_char_R1_V0    
PtrType_char_R1_V0_0_0 = coder.types.Pointer;
   PtrType_char_R1_V0_0_0.BaseType = Type_char_R1_V0;
    PtrType_char_R1_V0_0_0.ReadOnly = 0;
    PtrType_char_R1_V0_0_0.Volatile = 0;
    

% Pointer Type: Pointer to PtrType_char_R1_V0_0_0    
PtrPtrType_char_R1_V0_0_0_0_0 = coder.types.Pointer;
   PtrPtrType_char_R1_V0_0_0_0_0.BaseType = PtrType_char_R1_V0_0_0;
    PtrPtrType_char_R1_V0_0_0_0_0.ReadOnly = 0;
    PtrPtrType_char_R1_V0_0_0_0_0.Volatile = 0;
    
      Arg_rt_errorStatus = coder.types.Argument;
    Arg_rt_errorStatus.Type = PtrPtrType_char_R1_V0_0_0_0_0;
    Arg_rt_errorStatus.Name = 'rt_errorStatus';
    tmpArgs = [tmpArgs, Arg_rt_errorStatus];

      
    
% Variable: Var_rt_errorStatus
Var_rt_errorStatus = RTW.Variable(PtrPtrType_char_R1_V0_0_0_0_0, 'rt_errorStatus');
    Var_rt_errorStatus.Owner           = '';
    Var_rt_errorStatus.DeclarationFile = '';
    
    

       empty_timing = RTW.TimingInterface.empty;
    
% Data Interface: idata_rt_errorStatus
idata_rt_errorStatus = RTW.DataInterface('', 'rt_errorStatus', Var_rt_errorStatus, empty_timing);
    
    tmpActualArgs = [tmpActualArgs, idata_rt_errorStatus];


    
    
        Type_solver = coder.types.Opaque;
  Type_solver.Identifier = 'RTWSolverInfo';    

% Pointer Type: Pointer to Type_solver    
PtrType_solver_0_0 = coder.types.Pointer;
   PtrType_solver_0_0.BaseType = Type_solver;
    PtrType_solver_0_0.ReadOnly = 0;
    PtrType_solver_0_0.Volatile = 0;
    
      Arg_rt_solverInfo = coder.types.Argument;
    Arg_rt_solverInfo.Type = PtrType_solver_0_0;
    Arg_rt_solverInfo.Name = 'rt_solverInfo';
    tmpArgs = [tmpArgs, Arg_rt_solverInfo];

      
    
% Variable: Var_rt_solverInfo
Var_rt_solverInfo = RTW.Variable(PtrType_solver_0_0, 'rt_solverInfo');
    Var_rt_solverInfo.Owner           = '';
    Var_rt_solverInfo.DeclarationFile = '';
    
    

       empty_timing = RTW.TimingInterface.empty;
    
% Data Interface: idata_rt_solverInfo
idata_rt_solverInfo = RTW.DataInterface('', 'rt_solverInfo', Var_rt_solverInfo, empty_timing);
    
    tmpActualArgs = [tmpActualArgs, idata_rt_solverInfo];


    
  
    
  
  
    
  
  
    
    
  
  
  
  

    
            
    
    

  

    
            
    
    

  

    
            
    
    

  

    
        
    

  

    
        
    

  

    
        
    

  

    
        
    

 
  
  
  
  
      
      Type_TimingBridge = coder.types.Opaque;
  Type_TimingBridge.Identifier = 'rtTimingBridge';
  Type_TimingBridge.ReadOnly = 1;

% Pointer Type: Pointer to Type_TimingBridge    
PtrType_TimingBridge_0_0 = coder.types.Pointer;
   PtrType_TimingBridge_0_0.BaseType = Type_TimingBridge;
    PtrType_TimingBridge_0_0.ReadOnly = 0;
    PtrType_TimingBridge_0_0.Volatile = 0;
    
      Arg_timingBridge = coder.types.Argument;
    Arg_timingBridge.Type = PtrType_TimingBridge_0_0;
    Arg_timingBridge.Name = 'timingBridge';
    tmpArgs = [tmpArgs, Arg_timingBridge];

      
    
% Variable: Var_timingBridge
Var_timingBridge = RTW.Variable(PtrType_TimingBridge_0_0, 'timingBridge');
    Var_timingBridge.Owner           = '';
    Var_timingBridge.DeclarationFile = '';
    
    

       empty_timing = RTW.TimingInterface.empty;
    
% Data Interface: idata_timingBridge
idata_timingBridge = RTW.DataInterface('', 'timingBridge', Var_timingBridge, empty_timing);
    
    tmpActualArgs = [tmpActualArgs, idata_timingBridge];


  
% Unsized integer type    
Type_int_R0_V0 = coder.types.Int(32,1);
    Type_int_R0_V0.Identifier = 'int_T';
    Type_int_R0_V0.Name       = 'int';
    Type_int_R0_V0.ReadOnly   = 0;
    Type_int_R0_V0.Volatile   = 0;
    
        
  time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
            Arg_mdlref_TID0 = coder.types.Argument;
    Arg_mdlref_TID0.Type = Type_int_R0_V0;
    Arg_mdlref_TID0.Name = 'mdlref_TID0';
    tmpArgs = [tmpArgs, Arg_mdlref_TID0];

              
    
% Variable: Var_mdlref_TID0
Var_mdlref_TID0 = RTW.Variable(Type_int_R0_V0, 'mdlref_TID0');
    Var_mdlref_TID0.Owner           = '';
    Var_mdlref_TID0.DeclarationFile = '';
    
    

    
% Data Interface: idata_mdlref_TID0
idata_mdlref_TID0 = RTW.DataInterface('', 'mdlref_TID0', Var_mdlref_TID0, time_1);
    
    tmpActualArgs = [tmpActualArgs, idata_mdlref_TID0];

  time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
            Arg_mdlref_TID1 = coder.types.Argument;
    Arg_mdlref_TID1.Type = Type_int_R0_V0;
    Arg_mdlref_TID1.Name = 'mdlref_TID1';
    tmpArgs = [tmpArgs, Arg_mdlref_TID1];

              
    
% Variable: Var_mdlref_TID1
Var_mdlref_TID1 = RTW.Variable(Type_int_R0_V0, 'mdlref_TID1');
    Var_mdlref_TID1.Owner           = '';
    Var_mdlref_TID1.DeclarationFile = '';
    
    

    
% Data Interface: idata_mdlref_TID1
idata_mdlref_TID1 = RTW.DataInterface('', 'mdlref_TID1', Var_mdlref_TID1, time_1);
    
    tmpActualArgs = [tmpActualArgs, idata_mdlref_TID1];

    

  
      
% Opaque Data Type
type_RTModel  = coder.types.Opaque;
       type_RTModel.Identifier = 'RT_MODEL_crazyflie_T';
      

% Pointer Type: Pointer to type_RTModel    
Ptrtype_RTModel_1_0 = coder.types.Pointer;
   Ptrtype_RTModel_1_0.BaseType = type_RTModel;
    Ptrtype_RTModel_1_0.ReadOnly = 1;
    Ptrtype_RTModel_1_0.Volatile = 0;
    
    Ptrtype_RTModel_1_0.ReadOnly = 1;
        Arg_rtm = coder.types.Argument;
    Arg_rtm.Type = Ptrtype_RTModel_1_0;
    Arg_rtm.Name = 'crazyflie_M';
    tmpArgs = [tmpArgs, Arg_rtm];

        
    
% Variable: Var_RTModel
Var_RTModel = RTW.Variable(type_RTModel, 'RTModel');
    Var_RTModel.Owner           = '';
    Var_RTModel.DeclarationFile = '';
    
    
    
% Pointer Variable: PtrVar_RTModel
PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'RTModel_ptr', Var_RTModel);
    

       empty_timing = RTW.TimingInterface.empty;
    
% Data Interface: idata_RTModel
idata_RTModel = RTW.DataInterface('', 'RTModel', PtrVar_RTModel, empty_timing);
    
    tmpActualArgs = [tmpActualArgs, idata_RTModel];

  
  
  
  
   

  
  
  
    
  
    RegistrationFcn_Prototype = coder.types.Prototype;   
  RegistrationFcn_Prototype.HeaderFile = ['crazyflie', '.h'];
    RegistrationFcn_Prototype.SourceFile = ['crazyflie', '.c'];
  
    RegistrationFcn_Prototype.Name = 'crazyflie_initialize';
  RegistrationFcn_Prototype.Arguments  = tmpArgs;
  RegistrationFcn_Prototype.Return     = tmpRet;

    RegistrationFcn_Interface = RTW.FunctionInterface;
  
  RegistrationFcn_Interface.Prototype    = RegistrationFcn_Prototype;
  RegistrationFcn_Interface.ActualArgs   = tmpActualArgs;
  RegistrationFcn_Interface.ActualReturn = tmpActualReturn;
  
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      RegistrationFcn_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, RegistrationFcn_Interface'];
  

        
    
    
    tmpArgs         = [];           
    tmpActualArgs   = [];           
    tmpRet          = coder.types.Argument.empty;           
    tmpActualReturn = RTW.DataInterface.empty;           

    
      
  
  
    
  
    
  
  
    
    

                Ptrtype_RTModel_1_0.ReadOnly = 1;
      Arg_rtm = coder.types.Argument;
    Arg_rtm.Type = Ptrtype_RTModel_1_0;
    Arg_rtm.Name = 'crazyflie_M';
    tmpArgs = [tmpArgs, Arg_rtm];

      
    

       empty_timing = RTW.TimingInterface.empty;
    tmpActualArgs = [tmpActualArgs, idata_RTModel];


                        
% Built-In Type: 0
Type_0_R1_V0_C0 = coder.types.Double;
  Type_0_R1_V0_C0.Name = 'double';
  Type_0_R1_V0_C0.Identifier = 'real_T';
  Type_0_R1_V0_C0.ReadOnly   = 1;
  Type_0_R1_V0_C0.Volatile   = 0;
    
% Pointer Type: Pointer to Type_0_R1_V0_C0    
PtrType_0_R1_V0_C0_0_0 = coder.types.Pointer;
   PtrType_0_R1_V0_C0_0_0.BaseType = Type_0_R1_V0_C0;
    PtrType_0_R1_V0_C0_0_0.ReadOnly = 0;
    PtrType_0_R1_V0_C0_0_0.Volatile = 0;
    
    
    
      codeInfo.Inports(1).Implementation.Identifier = ['i_' codeInfo.Inports(1).Implementation.Identifier];
      
        Arg_ci0 = coder.types.Argument;
    Arg_ci0.Type = PtrType_0_R1_V0_C0_0_0;
    Arg_ci0.Name = 'rtu_Base_Thrust';
    tmpArgs = [tmpArgs, Arg_ci0];

    tmpActualArgs = [tmpActualArgs, codeInfo.Inports(1)];
    fr.updateInportArg(codeInfo.Inports(1), 1);

                  
    
      codeInfo.Inports(2).Implementation.Identifier = ['i_' codeInfo.Inports(2).Implementation.Identifier];
      
        Arg_ci1 = coder.types.Argument;
    Arg_ci1.Type = PtrType_0_R1_V0_C0_0_0;
    Arg_ci1.Name = 'rtu_Ref_Roll';
    tmpArgs = [tmpArgs, Arg_ci1];

    tmpActualArgs = [tmpActualArgs, codeInfo.Inports(2)];
    fr.updateInportArg(codeInfo.Inports(2), 2);

                  
    
      codeInfo.Inports(3).Implementation.Identifier = ['i_' codeInfo.Inports(3).Implementation.Identifier];
      
        Arg_ci2 = coder.types.Argument;
    Arg_ci2.Type = PtrType_0_R1_V0_C0_0_0;
    Arg_ci2.Name = 'rtu_Ref_Pitch';
    tmpArgs = [tmpArgs, Arg_ci2];

    tmpActualArgs = [tmpActualArgs, codeInfo.Inports(3)];
    fr.updateInportArg(codeInfo.Inports(3), 3);

                              
% Built-In Type: 5
Type_5_R0_V0_C0 = coder.types.Int(16,0);
  Type_5_R0_V0_C0.Name = 'uint16';
  Type_5_R0_V0_C0.Identifier = 'uint16_T';
  Type_5_R0_V0_C0.ReadOnly   = 0;
  Type_5_R0_V0_C0.Volatile   = 0;
    % Pointer Type: Pointer to 'Type_5_R0_V0_C0'    
Type_25_R0_V0_C0 = coder.types.Pointer;
  Type_25_R0_V0_C0.BaseType = Type_5_R0_V0_C0;
  Type_25_R0_V0_C0.ReadOnly = 0; 
  Type_25_R0_V0_C0.Volatile = 0;
        
      codeInfo.Outports(1).Implementation.Identifier = ['o_' codeInfo.Outports(1).Implementation.Identifier];
    
        Arg_co1 = coder.types.Argument;
    Arg_co1.Type = Type_25_R0_V0_C0;
    Arg_co1.Name = 'rty_Motor_1';
    tmpArgs = [tmpArgs, Arg_co1];

    tmpActualArgs = [tmpActualArgs, codeInfo.Outports(1)];
    fr.updateOutportArg(codeInfo.Outports(1), 1);

                  
      codeInfo.Outports(2).Implementation.Identifier = ['o_' codeInfo.Outports(2).Implementation.Identifier];
    
        Arg_co2 = coder.types.Argument;
    Arg_co2.Type = Type_25_R0_V0_C0;
    Arg_co2.Name = 'rty_Motor_2';
    tmpArgs = [tmpArgs, Arg_co2];

    tmpActualArgs = [tmpActualArgs, codeInfo.Outports(2)];
    fr.updateOutportArg(codeInfo.Outports(2), 2);

                  
      codeInfo.Outports(3).Implementation.Identifier = ['o_' codeInfo.Outports(3).Implementation.Identifier];
    
        Arg_co3 = coder.types.Argument;
    Arg_co3.Type = Type_25_R0_V0_C0;
    Arg_co3.Name = 'rty_Motor_3';
    tmpArgs = [tmpArgs, Arg_co3];

    tmpActualArgs = [tmpActualArgs, codeInfo.Outports(3)];
    fr.updateOutportArg(codeInfo.Outports(3), 3);

                  
      codeInfo.Outports(4).Implementation.Identifier = ['o_' codeInfo.Outports(4).Implementation.Identifier];
    
        Arg_co4 = coder.types.Argument;
    Arg_co4.Type = Type_25_R0_V0_C0;
    Arg_co4.Name = 'rty_Motor_4';
    tmpArgs = [tmpArgs, Arg_co4];

    tmpActualArgs = [tmpActualArgs, codeInfo.Outports(4)];
    fr.updateOutportArg(codeInfo.Outports(4), 4);

                    
% Opaque Data Type
type_localDW  = coder.types.Opaque;
       type_localDW.Identifier = 'DW_crazyflie_f_T';
      

% Pointer Type: Pointer to type_localDW    
Ptrtype_localDW_0_0 = coder.types.Pointer;
   Ptrtype_localDW_0_0.BaseType = type_localDW;
    Ptrtype_localDW_0_0.ReadOnly = 0;
    Ptrtype_localDW_0_0.Volatile = 0;
    
        Arg_localDW = coder.types.Argument;
    Arg_localDW.Type = Ptrtype_localDW_0_0;
    Arg_localDW.Name = 'localDW';
    tmpArgs = [tmpArgs, Arg_localDW];

        
    
% Variable: Var_localDW
Var_localDW = RTW.Variable(type_localDW, 'localDW');
    Var_localDW.Owner           = '';
    Var_localDW.DeclarationFile = '';
    
    

       empty_timing = RTW.TimingInterface.empty;
    
% Data Interface: idata_localDW
idata_localDW = RTW.DataInterface('', 'localDW', Var_localDW, empty_timing);
    
    tmpActualArgs = [tmpActualArgs, idata_localDW];


  

  
  
  

    
            
    
    

  

    
            
    
    

  

    
            
    
    

  

    
        
    

  

    
        
    

  

    
        
    

  

    
        
    

 
  
   
  
  
  
  
  
  
  
  
  
  
      
    
      OutputFcn_Prototype = coder.types.Prototype;   
  OutputFcn_Prototype.HeaderFile = ['crazyflie', '.h'];
    OutputFcn_Prototype.SourceFile = ['crazyflie', '.c'];
  
    OutputFcn_Prototype.Name = 'crazyflie';
  OutputFcn_Prototype.Arguments  = tmpArgs;
  OutputFcn_Prototype.Return     = tmpRet;

    
      OutputFcn_Interface = RTW.FunctionInterface;
  
  OutputFcn_Interface.Prototype    = OutputFcn_Prototype;
  OutputFcn_Interface.ActualArgs   = tmpActualArgs;
  OutputFcn_Interface.ActualReturn = tmpActualReturn;
  
  time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
      OutputFcn_Interface.Timing = time_1;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, OutputFcn_Interface];
  

        
        
    
    
    tmpArgs         = [];           
    tmpActualArgs   = [];           
    tmpRet          = coder.types.Argument.empty;           
    tmpActualReturn = RTW.DataInterface.empty;           

    
      
  
  
    
  
    
  
  
    
    

                Ptrtype_RTModel_1_0.ReadOnly = 1;
      Arg_rtm = coder.types.Argument;
    Arg_rtm.Type = Ptrtype_RTModel_1_0;
    Arg_rtm.Name = 'crazyflie_M';
    tmpArgs = [tmpArgs, Arg_rtm];

      
    

       empty_timing = RTW.TimingInterface.empty;
    tmpActualArgs = [tmpActualArgs, idata_RTModel];


                      Arg_localDW = coder.types.Argument;
    Arg_localDW.Type = Ptrtype_localDW_0_0;
    Arg_localDW.Name = 'localDW';
    tmpArgs = [tmpArgs, Arg_localDW];

        
    

       empty_timing = RTW.TimingInterface.empty;
    tmpActualArgs = [tmpActualArgs, idata_localDW];


  

  
  
  

    
            
    
    

  

    
            
    
    

  

    
            
    
    

  

    
        
    

  

    
        
    

  

    
        
    

  

    
        
    

 
  
   
  
  
  
  
  
  
  
  
  
  
      
    
      UpdateFcn_Prototype = coder.types.Prototype;   
  UpdateFcn_Prototype.HeaderFile = ['crazyflie', '.h'];
    UpdateFcn_Prototype.SourceFile = ['crazyflie', '.c'];
  
    UpdateFcn_Prototype.Name = 'crazyflie_Update';
  UpdateFcn_Prototype.Arguments  = tmpArgs;
  UpdateFcn_Prototype.Return     = tmpRet;

    
      UpdateFcn_Interface = RTW.FunctionInterface;
  
  UpdateFcn_Interface.Prototype    = UpdateFcn_Prototype;
  UpdateFcn_Interface.ActualArgs   = tmpActualArgs;
  UpdateFcn_Interface.ActualReturn = tmpActualReturn;
  
  time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
      UpdateFcn_Interface.Timing = time_1;
      codeInfo.UpdateFunctions =  [codeInfo.UpdateFunctions, UpdateFcn_Interface];
  

    

    
      
      
    
      
    
    
    
    
    tmpArgs         = [];           
    tmpActualArgs   = [];           
    tmpRet          = coder.types.Argument.empty;           
    tmpActualReturn = RTW.DataInterface.empty;           

    
      
  
  
    
  
    
  
  
    
    

                      Arg_localDW = coder.types.Argument;
    Arg_localDW.Type = Ptrtype_localDW_0_0;
    Arg_localDW.Name = 'localDW';
    tmpArgs = [tmpArgs, Arg_localDW];

        
    

       empty_timing = RTW.TimingInterface.empty;
    tmpActualArgs = [tmpActualArgs, idata_localDW];


  

  
  
  

    
            
    
    

  

    
            
    
    

  

    
            
    
    

  

    
        
    

  

    
        
    

  

    
        
    

  

    
        
    

 
  
   
  
  
  
  
  
  
  
  
  
  
      
    
      StartFcn_Prototype = coder.types.Prototype;   
  StartFcn_Prototype.HeaderFile = ['crazyflie', '.h'];
    StartFcn_Prototype.SourceFile = ['crazyflie', '.c'];
  
    StartFcn_Prototype.Name = 'crazyflie_Start';
  StartFcn_Prototype.Arguments  = tmpArgs;
  StartFcn_Prototype.Return     = tmpRet;

    
      StartFcn_Interface = RTW.FunctionInterface;
  
  StartFcn_Interface.Prototype    = StartFcn_Prototype;
  StartFcn_Interface.ActualArgs   = tmpActualArgs;
  StartFcn_Interface.ActualReturn = tmpActualReturn;
  
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      StartFcn_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, StartFcn_Interface'];
  

      
    
    
    
    


    

  





wr.closeRepo();


if ~isempty(skippedParameters)
fr.removeSkippedParameters(codeInfo.Parameters(skippedParameters));
codeInfo.Parameters(skippedParameters) = [];
end

codeInfo.InternalData = [codeInfo.InternalData, idata_RTModel];
  fr.addInternalData(idata_RTModel);
codeInfo.InternalData(end+1) = idata_localDW;
  fr.addInternalData(idata_localDW);
codeInfo.InternalData(end+1) = idata_mdlref_TID0;
  fr.addInternalData(idata_mdlref_TID0);
codeInfo.InternalData(end+1) = idata_mdlref_TID1;
  fr.addInternalData(idata_mdlref_TID1);
codeInfo.InternalData(end+1) = idata_rt_errorStatus;
  fr.addInternalData(idata_rt_errorStatus);
codeInfo.InternalData(end+1) = idata_rt_solverInfo;
  fr.addInternalData(idata_rt_solverInfo);
codeInfo.InternalData(end+1) = idata_timingBridge;
  fr.addInternalData(idata_timingBridge);

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

fr.writeFunctionInterfaces(codeInfo);
fr.writeServerCallPoints(codeInfo);



  lookupTableArray = [];
  if exist('expInports', 'var')
      save crazyflie_mr_codeInfo.mat codeInfo expInports lookupTableArray;
  else
      save crazyflie_mr_codeInfo.mat codeInfo lookupTableArray;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
  data = RTW.DataInterface.empty;
  for idx=1:numel(list)
      if ~isPresentDI(data, list(idx))
          data(end+1) = list(idx); %#ok<AGROW>
      end
  end
% End Function: uniquifyDataAccess
        
function isPresent = isPresentDI(list, di)
  isPresent = false;
  for idx = 1:numel(list)
    if isequal(list(idx), di)
      isPresent = true;
      break
    end
  end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataName, iDataVec(idxData).GraphicalName)
       iData(end+1) = iDataVec(idxData);
       break
    end
 end
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function paramIndex = getParamIndexFromGraphicalName(iParamVec, graphicalName)
  paramIndex = [];
  for idxData = 1:numel(iParamVec)
    if strcmp(graphicalName, iParamVec(idxData).GraphicalName)
       paramIndex = idxData;
       break
    end
  end
% End Function: getParamIndexFromGraphicalName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end

% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end

% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end

% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    

